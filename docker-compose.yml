networks:
  my_custom_network:
    driver: bridge
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    networks:
      - my_custom_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    networks:
      - my_custom_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "9092:9092"
  ollama:
    image: ollama/ollama:latest
    hostname: ollama
    networks:
      - my_custom_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    ports:
      - "11434:11434"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "11434"]
      interval: 10s
      timeout: 5s
      retries: 3
  customer_billing:
    build:
      context: ./customer_billing
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - my_custom_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      kafka:
        condition: service_healthy
  accounts_receivable:
    build:
      context: ./accounts_receivable
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    networks:
      - my_custom_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      kafka:
        condition: service_healthy
  ai_agent:
    build:
      context: ./ai_agent/
      dockerfile: Dockerfile
    networks:
      - my_custom_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      kafka:
        condition: service_healthy
      customer_billing:
        condition: service_started
      accounts_receivable:
        condition: service_started
      ollama:
        condition: service_healthy
    environment:
      OLLAMA_BASE_URL: "http://ollama:11434"
  kafka_producer:
    build:
      context: ./kafka_producer
      dockerfile: Dockerfile
    networks:
      - my_custom_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      kafka:
        condition: service_healthy
        
  kafka_consumer:
    build:
      context: ./kafka_consumer
      dockerfile: Dockerfile
    networks:
      - my_custom_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      kafka:
        condition: service_healthy
        
  crm-service:
    build: ./crm-service
    ports:
      - "5000:5000"
    networks:
      - my_custom_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      kafka:
        condition: service_healthy

  ai-service:
    build: ./ai-service
    ports:
      - "5001:5001"
    networks:
      - my_custom_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      kafka:
        condition: service_healthy
  
  postgres:
    image: postgres:15
    container_name: crm_postgres
    restart: always
    environment:
      POSTGRES_USER: crm_user
      POSTGRES_PASSWORD: pg
      POSTGRES_DB: crm_db
    ports:
      - "5433:5433"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_custom_network
volumes:
  postgres_data: